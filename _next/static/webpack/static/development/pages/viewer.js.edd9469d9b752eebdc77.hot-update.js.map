{"version":3,"file":"static/webpack/static/development/pages/viewer.js.edd9469d9b752eebdc77.hot-update.js","sources":["webpack:///./src/components/Layout/FooterBar.js","webpack:///./src/components/Layout/NetworkSelector.js","webpack:///./src/config/index.js"],"sourcesContent":["import NetworkSelector from \"./NetworkSelector\";\nimport css from \"./footer.scss\";\n\nconst NavigationBar = () => (\n  <div className=\"bg-brand-dark p-1 m-0\" id={css[\"footer-print\"]}>\n    <div className={css.footer}>\n      <div>\n        <a href=\"/faq\">FAQ</a>\n      </div>\n      <div>\n        <a href=\"https://github.com/OpenCerts/open-certificate\">Github</a>\n      </div>\n      <div>\n        <a href=\"/registry\">Registry</a>\n      </div>\n      <div className={css.networkselector}>\n        <NetworkSelector />\n      </div>\n    </div>\n  </div>\n);\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { types as networkTypes } from \"../../services/web3/getWeb3\";\nimport {\n  updateWeb3,\n  getNetwork,\n  getCustomRpc\n} from \"../../reducers/application\";\n\nclass NetworkSelector extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNetworkChange = this.handleNetworkChange.bind(this);\n  }\n\n  handleNetworkChange(e) {\n    this.props.updateWeb3({\n      network: e.target.value\n    });\n  }\n\n  render() {\n    const { INFURA_MAINNET, INFURA_ROPSTEN } = networkTypes;\n\n    return (\n      <div>\n        <select\n          className=\"pa2\"\n          value={this.props.network}\n          onChange={this.handleNetworkChange}\n          style={{\n            backgroundColor: \"white\",\n            borderWidth: 0,\n            borderRadius: 0\n          }}\n        >\n          <option value={INFURA_MAINNET}>Mainnet</option>\n          <option value={INFURA_ROPSTEN}>Testnet (Ropsten)</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  network: getNetwork(store),\n  customRpc: getCustomRpc(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateWeb3: payload => dispatch(updateWeb3(payload))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NetworkSelector);\n\nNetworkSelector.propTypes = {\n  network: PropTypes.string,\n  customRpc: PropTypes.string,\n  updateWeb3: PropTypes.func\n};\n","import { types as Web3Types } from \"../services/web3/getWeb3\";\n\nexport const DEFAULT_NETWORK = Web3Types.INFURA_ROPSTEN;\nexport const CAPTCHA_CLIENT_KEY = \"6LfiL3EUAAAAAHrfLvl2KhRAcXpanNXDqu6M0CCS\";\nexport const EMAIL_API_URL =\n  \"https://ikeem3vgb5.execute-api.ap-southeast-1.amazonaws.com/dev\";\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAjCA;AACA;AAmCA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;AAKA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;A","sourceRoot":""}